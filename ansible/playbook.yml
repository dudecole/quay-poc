---
- hosts: all
  gather_facts: True
  become: True

  vars_files:
    - vars.yml 

  pre_tasks:

  - name: get IP geolocation data for SSL key
    ipinfoio_facts:
    register: ipdata  

  - name: set domain
    set_fact:
      domain: "{{ ansible_eth1.ipv4.address }}.nip.io"    

  - name: generate openssl.cnf
    template:
      src: template/openssl.cnf.j2
      dest: /root/openssl.cnf

  - name: generate root CA key
    command: openssl genrsa -out /root/rootCA.key 2048
    args:
      creates: /root/rootCA.key

  - name: generate public root certificate
    command: openssl req -x509 -new -nodes -key /root/rootCA.key -sha256 -days 1024 -out /root/rootCA.pem -subj "/CN=quay-enterprise"
    args:
      creates: /root/rootCA.pem

  - name: generate ssl key
    command: openssl genrsa -out /root/ssl.key 2048
    args:
      creates: /root/ssl.key

  - name: generate ssl csr
    command: openssl req -new -key /root/ssl.key -out /root/ssl.csr -subj "/CN=quay-enterprise" -config /root/openssl.cnf
    args:
      creates: /root/ssl.csr

  - name: sign the ssl key with the generated root CA
    command: openssl x509 -req -in /root/ssl.csr -CA /root/rootCA.pem -CAkey /root/rootCA.key -CAcreateserial -out /root/ssl.cert -days 356 -extensions v3_req -extfile /root/openssl.cnf 
    args:
      creates: /root/ssl.cert


  - name: install epel
    yum:
      name: epel-release
      state: present
 
  - name: install required packages
    yum:
      name: 
        - podman 
        - docker
      state: present

  - name: start docker
    systemd:
      name: podman.service
      state: started

  - name: install pip docker
    pip:
      name: 
        - docker
        - docker-compose
      state: present

  - name: Initialise docker network for frontend & backend services
    docker_network:
      name: "{{ item }}"
    with_items:
      - "quay_front"
      - "quay_back"
    tags: always

  - name: enable docker
    systemd:
      name: podman.service
      enabled: yes
      state: started

  - name: download red hat certificates
    get_url:
     url: http://mirror.centos.org/centos/7/os/x86_64/Packages/python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm
     dest: /tmp/python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm

  - name: install red hat certificates
    shell: ppm2cpio /tmp/python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm | cpio -iv --to-stdout ./etc/rhsm/ca/redhat-uep.pem | tee /etc/rhsm/ca/redhat-uep.pem 
    args:
      creates: /etc/rhsm/ca/redhat-uep.pem

  - name: create docker config direct for root
    file:
      state: directory
      path: /root/.docker

  - name: configure quay.io credentials
    copy:
      dest: /root/.docker/config.json
      content: |
        {
                "auths": {
                        "quay.io": {
                                "auth": "Y29yZW9zK3JoY3A6TDZaWFhWSEQ5WExRN1BSN0hCTlJXMkZBSVpRTkpZSFJFSVNGR0NVQklCNDVDNDNXQ1dZVTNEWjBGSEpIMkFZNQ==",
                                "email": "coreos+rhcp"
                        }
                }
        }

  tasks:

  - name: create mysql data directory
    file:
      path: "{{ item }}"
      state: directory
      mode: 0777
    with_items:
      - /opt/postgresql
      - /opt/redis
      - /opt/quay/storage
      - /opt/quay/config

  - name: copy ssl key into quays config directory
    copy:
      remote_src: yes
      src: /root/ssl.key
      dest: /opt/quay/config/ssl.key

  - name: copy ssl certificates into quays config directory
    copy:
      remote_src: yes
      src: /root/ssl.cert
      dest: /opt/quay/config/ssl.cert

  - name: Initialising services with docker-compose
    docker_compose:
      project_name: quay
      recreate: always
      definition:
        version: '2'
        services:
          postgresql:
            image: docker.io/postgres:9.6.11
            volumes:
              - /opt/postgresql:/var/lib/pgsql/data:Z
            networks:
              - back
            environment:
              POSTGRES_USER: "{{ POSTGRES_USER }}"
              POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
              POSTGRES_DB: "{{  POSTGRES_DB }}"
            restart: unless-stopped
          redis:
            image: registry.access.redhat.com/rhscl/redis-32-rhel7
            volumes:
              - /opt/redis/:/var/lib/redis/data:Z
            networks:
              - back
            restart: unless-stopped
        networks:
          front:
          back:
        volumes:
          db:
          data:

  - name: start quay container in privleged
    docker_container:
      name: quay
      image: "quay.io/coreos/quay:v2.9.2"
      privileged: yes
#      networks:
#        - name: "quay_front"
#        - name: "quay_back"
      exposed_ports:
        - "80"
        - "443"
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - /opt/quay/config:/conf/stack:Z
        - /opt/quay/storage:/datastorage:Z
      restart_policy: always  
